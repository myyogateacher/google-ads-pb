// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: google/ads/googleads/v21/common/third_party_integration_partners.proto

package common

import (
	enums "github.com/shenzhencenter/google-ads-pb/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Container for Customer level third party integration partners.
// Next Id = 5
type CustomerThirdPartyIntegrationPartners struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed third party integration partners for YouTube viewability
	// verification.
	ViewabilityIntegrationPartners []*CustomerThirdPartyViewabilityIntegrationPartner `protobuf:"bytes,1,rep,name=viewability_integration_partners,json=viewabilityIntegrationPartners,proto3" json:"viewability_integration_partners,omitempty"`
	// Allowed third party integration partners for Brand Lift verification.
	BrandLiftIntegrationPartners []*CustomerThirdPartyBrandLiftIntegrationPartner `protobuf:"bytes,2,rep,name=brand_lift_integration_partners,json=brandLiftIntegrationPartners,proto3" json:"brand_lift_integration_partners,omitempty"`
	// Allowed third party integration partners for brand safety verification.
	BrandSafetyIntegrationPartners []*CustomerThirdPartyBrandSafetyIntegrationPartner `protobuf:"bytes,3,rep,name=brand_safety_integration_partners,json=brandSafetyIntegrationPartners,proto3" json:"brand_safety_integration_partners,omitempty"`
	// Allowed third party integration partners for reach verification.
	ReachIntegrationPartners []*CustomerThirdPartyReachIntegrationPartner `protobuf:"bytes,4,rep,name=reach_integration_partners,json=reachIntegrationPartners,proto3" json:"reach_integration_partners,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CustomerThirdPartyIntegrationPartners) Reset() {
	*x = CustomerThirdPartyIntegrationPartners{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerThirdPartyIntegrationPartners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerThirdPartyIntegrationPartners) ProtoMessage() {}

func (x *CustomerThirdPartyIntegrationPartners) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerThirdPartyIntegrationPartners.ProtoReflect.Descriptor instead.
func (*CustomerThirdPartyIntegrationPartners) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{0}
}

func (x *CustomerThirdPartyIntegrationPartners) GetViewabilityIntegrationPartners() []*CustomerThirdPartyViewabilityIntegrationPartner {
	if x != nil {
		return x.ViewabilityIntegrationPartners
	}
	return nil
}

func (x *CustomerThirdPartyIntegrationPartners) GetBrandLiftIntegrationPartners() []*CustomerThirdPartyBrandLiftIntegrationPartner {
	if x != nil {
		return x.BrandLiftIntegrationPartners
	}
	return nil
}

func (x *CustomerThirdPartyIntegrationPartners) GetBrandSafetyIntegrationPartners() []*CustomerThirdPartyBrandSafetyIntegrationPartner {
	if x != nil {
		return x.BrandSafetyIntegrationPartners
	}
	return nil
}

func (x *CustomerThirdPartyIntegrationPartners) GetReachIntegrationPartners() []*CustomerThirdPartyReachIntegrationPartner {
	if x != nil {
		return x.ReachIntegrationPartners
	}
	return nil
}

// Container for third party viewability integration data for Customer.
// Next Id = 3
type CustomerThirdPartyViewabilityIntegrationPartner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed third party integration partners for YouTube viewability
	// verification.
	ViewabilityIntegrationPartner enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner `protobuf:"varint,1,opt,name=viewability_integration_partner,json=viewabilityIntegrationPartner,proto3,enum=google.ads.googleads.v21.enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner" json:"viewability_integration_partner,omitempty"`
	// If true, cost data can be shared with this vendor.
	AllowShareCost bool `protobuf:"varint,2,opt,name=allow_share_cost,json=allowShareCost,proto3" json:"allow_share_cost,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CustomerThirdPartyViewabilityIntegrationPartner) Reset() {
	*x = CustomerThirdPartyViewabilityIntegrationPartner{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerThirdPartyViewabilityIntegrationPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerThirdPartyViewabilityIntegrationPartner) ProtoMessage() {}

func (x *CustomerThirdPartyViewabilityIntegrationPartner) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerThirdPartyViewabilityIntegrationPartner.ProtoReflect.Descriptor instead.
func (*CustomerThirdPartyViewabilityIntegrationPartner) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{1}
}

func (x *CustomerThirdPartyViewabilityIntegrationPartner) GetViewabilityIntegrationPartner() enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner {
	if x != nil {
		return x.ViewabilityIntegrationPartner
	}
	return enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner(0)
}

func (x *CustomerThirdPartyViewabilityIntegrationPartner) GetAllowShareCost() bool {
	if x != nil {
		return x.AllowShareCost
	}
	return false
}

// Container for third party brand safety integration data for Customer.
// Next Id = 2
type CustomerThirdPartyBrandSafetyIntegrationPartner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed third party integration partners for brand safety verification.
	BrandSafetyIntegrationPartner enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner `protobuf:"varint,1,opt,name=brand_safety_integration_partner,json=brandSafetyIntegrationPartner,proto3,enum=google.ads.googleads.v21.enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner" json:"brand_safety_integration_partner,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CustomerThirdPartyBrandSafetyIntegrationPartner) Reset() {
	*x = CustomerThirdPartyBrandSafetyIntegrationPartner{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerThirdPartyBrandSafetyIntegrationPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerThirdPartyBrandSafetyIntegrationPartner) ProtoMessage() {}

func (x *CustomerThirdPartyBrandSafetyIntegrationPartner) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerThirdPartyBrandSafetyIntegrationPartner.ProtoReflect.Descriptor instead.
func (*CustomerThirdPartyBrandSafetyIntegrationPartner) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{2}
}

func (x *CustomerThirdPartyBrandSafetyIntegrationPartner) GetBrandSafetyIntegrationPartner() enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner {
	if x != nil {
		return x.BrandSafetyIntegrationPartner
	}
	return enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner(0)
}

// Container for third party Brand Lift integration data for Customer.
// Next Id = 3
type CustomerThirdPartyBrandLiftIntegrationPartner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed Third Party integration partners for Brand Lift verification.
	BrandLiftIntegrationPartner enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner `protobuf:"varint,1,opt,name=brand_lift_integration_partner,json=brandLiftIntegrationPartner,proto3,enum=google.ads.googleads.v21.enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner" json:"brand_lift_integration_partner,omitempty"`
	// If true, cost data can be shared with this vendor.
	AllowShareCost bool `protobuf:"varint,2,opt,name=allow_share_cost,json=allowShareCost,proto3" json:"allow_share_cost,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CustomerThirdPartyBrandLiftIntegrationPartner) Reset() {
	*x = CustomerThirdPartyBrandLiftIntegrationPartner{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerThirdPartyBrandLiftIntegrationPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerThirdPartyBrandLiftIntegrationPartner) ProtoMessage() {}

func (x *CustomerThirdPartyBrandLiftIntegrationPartner) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerThirdPartyBrandLiftIntegrationPartner.ProtoReflect.Descriptor instead.
func (*CustomerThirdPartyBrandLiftIntegrationPartner) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{3}
}

func (x *CustomerThirdPartyBrandLiftIntegrationPartner) GetBrandLiftIntegrationPartner() enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner {
	if x != nil {
		return x.BrandLiftIntegrationPartner
	}
	return enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner(0)
}

func (x *CustomerThirdPartyBrandLiftIntegrationPartner) GetAllowShareCost() bool {
	if x != nil {
		return x.AllowShareCost
	}
	return false
}

// Container for third party reach integration data for Customer.
// Next Id = 3
type CustomerThirdPartyReachIntegrationPartner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed Third Party integration partners for reach verification.
	ReachIntegrationPartner enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner `protobuf:"varint,1,opt,name=reach_integration_partner,json=reachIntegrationPartner,proto3,enum=google.ads.googleads.v21.enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner" json:"reach_integration_partner,omitempty"`
	// If true, cost data can be shared with this vendor.
	AllowShareCost bool `protobuf:"varint,2,opt,name=allow_share_cost,json=allowShareCost,proto3" json:"allow_share_cost,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CustomerThirdPartyReachIntegrationPartner) Reset() {
	*x = CustomerThirdPartyReachIntegrationPartner{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerThirdPartyReachIntegrationPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerThirdPartyReachIntegrationPartner) ProtoMessage() {}

func (x *CustomerThirdPartyReachIntegrationPartner) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerThirdPartyReachIntegrationPartner.ProtoReflect.Descriptor instead.
func (*CustomerThirdPartyReachIntegrationPartner) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{4}
}

func (x *CustomerThirdPartyReachIntegrationPartner) GetReachIntegrationPartner() enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner {
	if x != nil {
		return x.ReachIntegrationPartner
	}
	return enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner(0)
}

func (x *CustomerThirdPartyReachIntegrationPartner) GetAllowShareCost() bool {
	if x != nil {
		return x.AllowShareCost
	}
	return false
}

// Container for Campaign level third party integration partners.
// Next Id = 5
type CampaignThirdPartyIntegrationPartners struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Third party integration partners for YouTube viewability
	// verification for this Campaign.
	ViewabilityIntegrationPartners []*CampaignThirdPartyViewabilityIntegrationPartner `protobuf:"bytes,1,rep,name=viewability_integration_partners,json=viewabilityIntegrationPartners,proto3" json:"viewability_integration_partners,omitempty"`
	// Third party integration partners for Brand Lift verification for this
	// Campaign.
	BrandLiftIntegrationPartners []*CampaignThirdPartyBrandLiftIntegrationPartner `protobuf:"bytes,2,rep,name=brand_lift_integration_partners,json=brandLiftIntegrationPartners,proto3" json:"brand_lift_integration_partners,omitempty"`
	// Third party integration partners for brand safety verification for this
	// Campaign.
	BrandSafetyIntegrationPartners []*CampaignThirdPartyBrandSafetyIntegrationPartner `protobuf:"bytes,3,rep,name=brand_safety_integration_partners,json=brandSafetyIntegrationPartners,proto3" json:"brand_safety_integration_partners,omitempty"`
	// Third party integration partners for reach verification for this Campaign.
	ReachIntegrationPartners []*CampaignThirdPartyReachIntegrationPartner `protobuf:"bytes,4,rep,name=reach_integration_partners,json=reachIntegrationPartners,proto3" json:"reach_integration_partners,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CampaignThirdPartyIntegrationPartners) Reset() {
	*x = CampaignThirdPartyIntegrationPartners{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignThirdPartyIntegrationPartners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignThirdPartyIntegrationPartners) ProtoMessage() {}

func (x *CampaignThirdPartyIntegrationPartners) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignThirdPartyIntegrationPartners.ProtoReflect.Descriptor instead.
func (*CampaignThirdPartyIntegrationPartners) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{5}
}

func (x *CampaignThirdPartyIntegrationPartners) GetViewabilityIntegrationPartners() []*CampaignThirdPartyViewabilityIntegrationPartner {
	if x != nil {
		return x.ViewabilityIntegrationPartners
	}
	return nil
}

func (x *CampaignThirdPartyIntegrationPartners) GetBrandLiftIntegrationPartners() []*CampaignThirdPartyBrandLiftIntegrationPartner {
	if x != nil {
		return x.BrandLiftIntegrationPartners
	}
	return nil
}

func (x *CampaignThirdPartyIntegrationPartners) GetBrandSafetyIntegrationPartners() []*CampaignThirdPartyBrandSafetyIntegrationPartner {
	if x != nil {
		return x.BrandSafetyIntegrationPartners
	}
	return nil
}

func (x *CampaignThirdPartyIntegrationPartners) GetReachIntegrationPartners() []*CampaignThirdPartyReachIntegrationPartner {
	if x != nil {
		return x.ReachIntegrationPartners
	}
	return nil
}

// Container for third party viewability integration data for Campaign.
// Next Id = 4
type CampaignThirdPartyViewabilityIntegrationPartner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed third party integration partners for YouTube viewability
	// verification.
	ViewabilityIntegrationPartner enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner `protobuf:"varint,1,opt,name=viewability_integration_partner,json=viewabilityIntegrationPartner,proto3,enum=google.ads.googleads.v21.enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner" json:"viewability_integration_partner,omitempty"`
	// Third party partner data for YouTube viewability verification. This is
	// optional metadata for partners to join or attach data to Ads campaigns.
	ViewabilityIntegrationPartnerData *ThirdPartyIntegrationPartnerData `protobuf:"bytes,2,opt,name=viewability_integration_partner_data,json=viewabilityIntegrationPartnerData,proto3" json:"viewability_integration_partner_data,omitempty"`
	// If true, then cost data will be shared with this vendor.
	ShareCost     bool `protobuf:"varint,3,opt,name=share_cost,json=shareCost,proto3" json:"share_cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CampaignThirdPartyViewabilityIntegrationPartner) Reset() {
	*x = CampaignThirdPartyViewabilityIntegrationPartner{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignThirdPartyViewabilityIntegrationPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignThirdPartyViewabilityIntegrationPartner) ProtoMessage() {}

func (x *CampaignThirdPartyViewabilityIntegrationPartner) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignThirdPartyViewabilityIntegrationPartner.ProtoReflect.Descriptor instead.
func (*CampaignThirdPartyViewabilityIntegrationPartner) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{6}
}

func (x *CampaignThirdPartyViewabilityIntegrationPartner) GetViewabilityIntegrationPartner() enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner {
	if x != nil {
		return x.ViewabilityIntegrationPartner
	}
	return enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner(0)
}

func (x *CampaignThirdPartyViewabilityIntegrationPartner) GetViewabilityIntegrationPartnerData() *ThirdPartyIntegrationPartnerData {
	if x != nil {
		return x.ViewabilityIntegrationPartnerData
	}
	return nil
}

func (x *CampaignThirdPartyViewabilityIntegrationPartner) GetShareCost() bool {
	if x != nil {
		return x.ShareCost
	}
	return false
}

// Container for third party brand safety integration data for Campaign.
// Next Id = 3
type CampaignThirdPartyBrandSafetyIntegrationPartner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed third party integration partners for brand safety verification.
	BrandSafetyIntegrationPartner enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner `protobuf:"varint,1,opt,name=brand_safety_integration_partner,json=brandSafetyIntegrationPartner,proto3,enum=google.ads.googleads.v21.enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner" json:"brand_safety_integration_partner,omitempty"`
	// Third party partner data for YouTube brand safety verification. This is
	// optional metadata for partners to join or attach data to Ads campaigns.
	BrandSafetyIntegrationPartnerData *ThirdPartyIntegrationPartnerData `protobuf:"bytes,2,opt,name=brand_safety_integration_partner_data,json=brandSafetyIntegrationPartnerData,proto3" json:"brand_safety_integration_partner_data,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *CampaignThirdPartyBrandSafetyIntegrationPartner) Reset() {
	*x = CampaignThirdPartyBrandSafetyIntegrationPartner{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignThirdPartyBrandSafetyIntegrationPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignThirdPartyBrandSafetyIntegrationPartner) ProtoMessage() {}

func (x *CampaignThirdPartyBrandSafetyIntegrationPartner) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignThirdPartyBrandSafetyIntegrationPartner.ProtoReflect.Descriptor instead.
func (*CampaignThirdPartyBrandSafetyIntegrationPartner) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{7}
}

func (x *CampaignThirdPartyBrandSafetyIntegrationPartner) GetBrandSafetyIntegrationPartner() enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner {
	if x != nil {
		return x.BrandSafetyIntegrationPartner
	}
	return enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner(0)
}

func (x *CampaignThirdPartyBrandSafetyIntegrationPartner) GetBrandSafetyIntegrationPartnerData() *ThirdPartyIntegrationPartnerData {
	if x != nil {
		return x.BrandSafetyIntegrationPartnerData
	}
	return nil
}

// Container for third party Brand Lift integration data for Campaign.
// Next Id = 4
type CampaignThirdPartyBrandLiftIntegrationPartner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed third party integration partners for Brand Lift verification.
	BrandLiftIntegrationPartner enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner `protobuf:"varint,1,opt,name=brand_lift_integration_partner,json=brandLiftIntegrationPartner,proto3,enum=google.ads.googleads.v21.enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner" json:"brand_lift_integration_partner,omitempty"`
	// Third party partner data for YouTube Brand Lift verification. This is
	// optional metadata for partners to join or attach data to Ads campaigns.
	BrandLiftIntegrationPartnerData *ThirdPartyIntegrationPartnerData `protobuf:"bytes,2,opt,name=brand_lift_integration_partner_data,json=brandLiftIntegrationPartnerData,proto3" json:"brand_lift_integration_partner_data,omitempty"`
	// If true, then cost data will be shared with this vendor.
	ShareCost     bool `protobuf:"varint,3,opt,name=share_cost,json=shareCost,proto3" json:"share_cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CampaignThirdPartyBrandLiftIntegrationPartner) Reset() {
	*x = CampaignThirdPartyBrandLiftIntegrationPartner{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignThirdPartyBrandLiftIntegrationPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignThirdPartyBrandLiftIntegrationPartner) ProtoMessage() {}

func (x *CampaignThirdPartyBrandLiftIntegrationPartner) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignThirdPartyBrandLiftIntegrationPartner.ProtoReflect.Descriptor instead.
func (*CampaignThirdPartyBrandLiftIntegrationPartner) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{8}
}

func (x *CampaignThirdPartyBrandLiftIntegrationPartner) GetBrandLiftIntegrationPartner() enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner {
	if x != nil {
		return x.BrandLiftIntegrationPartner
	}
	return enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner(0)
}

func (x *CampaignThirdPartyBrandLiftIntegrationPartner) GetBrandLiftIntegrationPartnerData() *ThirdPartyIntegrationPartnerData {
	if x != nil {
		return x.BrandLiftIntegrationPartnerData
	}
	return nil
}

func (x *CampaignThirdPartyBrandLiftIntegrationPartner) GetShareCost() bool {
	if x != nil {
		return x.ShareCost
	}
	return false
}

// Container for third party reach integration data for Campaign.
// Next Id = 4
type CampaignThirdPartyReachIntegrationPartner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allowed third party integration partners for reach verification.
	ReachIntegrationPartner enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner `protobuf:"varint,1,opt,name=reach_integration_partner,json=reachIntegrationPartner,proto3,enum=google.ads.googleads.v21.enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner" json:"reach_integration_partner,omitempty"`
	// Third party partner data for YouTube Reach verification. This is
	// optional metadata for partners to join or attach data to Ads campaigns.
	ReachIntegrationPartnerData *ThirdPartyIntegrationPartnerData `protobuf:"bytes,2,opt,name=reach_integration_partner_data,json=reachIntegrationPartnerData,proto3" json:"reach_integration_partner_data,omitempty"`
	// If true, then cost data will be shared with this vendor.
	ShareCost     bool `protobuf:"varint,3,opt,name=share_cost,json=shareCost,proto3" json:"share_cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CampaignThirdPartyReachIntegrationPartner) Reset() {
	*x = CampaignThirdPartyReachIntegrationPartner{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignThirdPartyReachIntegrationPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignThirdPartyReachIntegrationPartner) ProtoMessage() {}

func (x *CampaignThirdPartyReachIntegrationPartner) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignThirdPartyReachIntegrationPartner.ProtoReflect.Descriptor instead.
func (*CampaignThirdPartyReachIntegrationPartner) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{9}
}

func (x *CampaignThirdPartyReachIntegrationPartner) GetReachIntegrationPartner() enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner {
	if x != nil {
		return x.ReachIntegrationPartner
	}
	return enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner(0)
}

func (x *CampaignThirdPartyReachIntegrationPartner) GetReachIntegrationPartnerData() *ThirdPartyIntegrationPartnerData {
	if x != nil {
		return x.ReachIntegrationPartnerData
	}
	return nil
}

func (x *CampaignThirdPartyReachIntegrationPartner) GetShareCost() bool {
	if x != nil {
		return x.ShareCost
	}
	return false
}

// Contains third party measurement partner related data for video campaigns.
// Next Id = 3
type ThirdPartyIntegrationPartnerData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The client ID that allows the measurement partner to join multiple
	// campaigns for a particular advertiser.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The third party placement ID that maps the measurement partner data with a
	// campaign (or a group of related campaigns) specific data.
	ThirdPartyPlacementId string `protobuf:"bytes,2,opt,name=third_party_placement_id,json=thirdPartyPlacementId,proto3" json:"third_party_placement_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ThirdPartyIntegrationPartnerData) Reset() {
	*x = ThirdPartyIntegrationPartnerData{}
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyIntegrationPartnerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyIntegrationPartnerData) ProtoMessage() {}

func (x *ThirdPartyIntegrationPartnerData) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyIntegrationPartnerData.ProtoReflect.Descriptor instead.
func (*ThirdPartyIntegrationPartnerData) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP(), []int{10}
}

func (x *ThirdPartyIntegrationPartnerData) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ThirdPartyIntegrationPartnerData) GetThirdPartyPlacementId() string {
	if x != nil {
		return x.ThirdPartyPlacementId
	}
	return ""
}

var File_google_ads_googleads_v21_common_third_party_integration_partners_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDesc = string([]byte{
	0x0a, 0x46, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x4f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x32, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x51, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2f, 0x76, 0x32, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4a, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x50, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x32, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x05, 0x0a, 0x25,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x20, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x52, 0x1e, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x1f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x66,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1c, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x21, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x18, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x2f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0xbb, 0x01, 0x0a, 0x1f, 0x76, 0x69, 0x65, 0x77,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65,
	0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1d, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x22,
	0xf0, 0x01, 0x0a, 0x2f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x52, 0x1d, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x22, 0x90, 0x02, 0x0a, 0x2d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a, 0x1e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1b,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x29, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x52, 0x17, 0x72, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x22, 0x85, 0x05, 0x0a, 0x25, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x9a, 0x01,
	0x0a, 0x20, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65,
	0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1e, 0x76, 0x69, 0x65, 0x77,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x1f, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x52, 0x1c, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x21, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x52, 0x1e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x88, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x52, 0x18, 0x72, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x2f,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12,
	0xbb, 0x01, 0x0a, 0x1f, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1d,
	0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x92, 0x01,
	0x0a, 0x24, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x21, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x22, 0x86, 0x03, 0x0a, 0x2f, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1d, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x12, 0x93, 0x01, 0x0a, 0x25, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x21, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x97, 0x03, 0x0a, 0x2d, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a,
	0x1e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x8f, 0x01, 0x0a, 0x23, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x1f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x29, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52,
	0x17, 0x72, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x1b, 0x72, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x22, 0x78, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x82, 0x02, 0x0a, 0x23, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x42, 0x22, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x32,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xa2,
	0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41,
	0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x32, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56,
	0x32, 0x31, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xea, 0x02, 0x23, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x64, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescData []byte
)

func file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDesc), len(file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDesc)))
	})
	return file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDescData
}

var file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_google_ads_googleads_v21_common_third_party_integration_partners_proto_goTypes = []any{
	(*CustomerThirdPartyIntegrationPartners)(nil),                                                  // 0: google.ads.googleads.v21.common.CustomerThirdPartyIntegrationPartners
	(*CustomerThirdPartyViewabilityIntegrationPartner)(nil),                                        // 1: google.ads.googleads.v21.common.CustomerThirdPartyViewabilityIntegrationPartner
	(*CustomerThirdPartyBrandSafetyIntegrationPartner)(nil),                                        // 2: google.ads.googleads.v21.common.CustomerThirdPartyBrandSafetyIntegrationPartner
	(*CustomerThirdPartyBrandLiftIntegrationPartner)(nil),                                          // 3: google.ads.googleads.v21.common.CustomerThirdPartyBrandLiftIntegrationPartner
	(*CustomerThirdPartyReachIntegrationPartner)(nil),                                              // 4: google.ads.googleads.v21.common.CustomerThirdPartyReachIntegrationPartner
	(*CampaignThirdPartyIntegrationPartners)(nil),                                                  // 5: google.ads.googleads.v21.common.CampaignThirdPartyIntegrationPartners
	(*CampaignThirdPartyViewabilityIntegrationPartner)(nil),                                        // 6: google.ads.googleads.v21.common.CampaignThirdPartyViewabilityIntegrationPartner
	(*CampaignThirdPartyBrandSafetyIntegrationPartner)(nil),                                        // 7: google.ads.googleads.v21.common.CampaignThirdPartyBrandSafetyIntegrationPartner
	(*CampaignThirdPartyBrandLiftIntegrationPartner)(nil),                                          // 8: google.ads.googleads.v21.common.CampaignThirdPartyBrandLiftIntegrationPartner
	(*CampaignThirdPartyReachIntegrationPartner)(nil),                                              // 9: google.ads.googleads.v21.common.CampaignThirdPartyReachIntegrationPartner
	(*ThirdPartyIntegrationPartnerData)(nil),                                                       // 10: google.ads.googleads.v21.common.ThirdPartyIntegrationPartnerData
	(enums.ThirdPartyViewabilityIntegrationPartnerEnum_ThirdPartyViewabilityIntegrationPartner)(0), // 11: google.ads.googleads.v21.enums.ThirdPartyViewabilityIntegrationPartnerEnum.ThirdPartyViewabilityIntegrationPartner
	(enums.ThirdPartyBrandSafetyIntegrationPartnerEnum_ThirdPartyBrandSafetyIntegrationPartner)(0), // 12: google.ads.googleads.v21.enums.ThirdPartyBrandSafetyIntegrationPartnerEnum.ThirdPartyBrandSafetyIntegrationPartner
	(enums.ThirdPartyBrandLiftIntegrationPartnerEnum_ThirdPartyBrandLiftIntegrationPartner)(0),     // 13: google.ads.googleads.v21.enums.ThirdPartyBrandLiftIntegrationPartnerEnum.ThirdPartyBrandLiftIntegrationPartner
	(enums.ThirdPartyReachIntegrationPartnerEnum_ThirdPartyReachIntegrationPartner)(0),             // 14: google.ads.googleads.v21.enums.ThirdPartyReachIntegrationPartnerEnum.ThirdPartyReachIntegrationPartner
}
var file_google_ads_googleads_v21_common_third_party_integration_partners_proto_depIdxs = []int32{
	1,  // 0: google.ads.googleads.v21.common.CustomerThirdPartyIntegrationPartners.viewability_integration_partners:type_name -> google.ads.googleads.v21.common.CustomerThirdPartyViewabilityIntegrationPartner
	3,  // 1: google.ads.googleads.v21.common.CustomerThirdPartyIntegrationPartners.brand_lift_integration_partners:type_name -> google.ads.googleads.v21.common.CustomerThirdPartyBrandLiftIntegrationPartner
	2,  // 2: google.ads.googleads.v21.common.CustomerThirdPartyIntegrationPartners.brand_safety_integration_partners:type_name -> google.ads.googleads.v21.common.CustomerThirdPartyBrandSafetyIntegrationPartner
	4,  // 3: google.ads.googleads.v21.common.CustomerThirdPartyIntegrationPartners.reach_integration_partners:type_name -> google.ads.googleads.v21.common.CustomerThirdPartyReachIntegrationPartner
	11, // 4: google.ads.googleads.v21.common.CustomerThirdPartyViewabilityIntegrationPartner.viewability_integration_partner:type_name -> google.ads.googleads.v21.enums.ThirdPartyViewabilityIntegrationPartnerEnum.ThirdPartyViewabilityIntegrationPartner
	12, // 5: google.ads.googleads.v21.common.CustomerThirdPartyBrandSafetyIntegrationPartner.brand_safety_integration_partner:type_name -> google.ads.googleads.v21.enums.ThirdPartyBrandSafetyIntegrationPartnerEnum.ThirdPartyBrandSafetyIntegrationPartner
	13, // 6: google.ads.googleads.v21.common.CustomerThirdPartyBrandLiftIntegrationPartner.brand_lift_integration_partner:type_name -> google.ads.googleads.v21.enums.ThirdPartyBrandLiftIntegrationPartnerEnum.ThirdPartyBrandLiftIntegrationPartner
	14, // 7: google.ads.googleads.v21.common.CustomerThirdPartyReachIntegrationPartner.reach_integration_partner:type_name -> google.ads.googleads.v21.enums.ThirdPartyReachIntegrationPartnerEnum.ThirdPartyReachIntegrationPartner
	6,  // 8: google.ads.googleads.v21.common.CampaignThirdPartyIntegrationPartners.viewability_integration_partners:type_name -> google.ads.googleads.v21.common.CampaignThirdPartyViewabilityIntegrationPartner
	8,  // 9: google.ads.googleads.v21.common.CampaignThirdPartyIntegrationPartners.brand_lift_integration_partners:type_name -> google.ads.googleads.v21.common.CampaignThirdPartyBrandLiftIntegrationPartner
	7,  // 10: google.ads.googleads.v21.common.CampaignThirdPartyIntegrationPartners.brand_safety_integration_partners:type_name -> google.ads.googleads.v21.common.CampaignThirdPartyBrandSafetyIntegrationPartner
	9,  // 11: google.ads.googleads.v21.common.CampaignThirdPartyIntegrationPartners.reach_integration_partners:type_name -> google.ads.googleads.v21.common.CampaignThirdPartyReachIntegrationPartner
	11, // 12: google.ads.googleads.v21.common.CampaignThirdPartyViewabilityIntegrationPartner.viewability_integration_partner:type_name -> google.ads.googleads.v21.enums.ThirdPartyViewabilityIntegrationPartnerEnum.ThirdPartyViewabilityIntegrationPartner
	10, // 13: google.ads.googleads.v21.common.CampaignThirdPartyViewabilityIntegrationPartner.viewability_integration_partner_data:type_name -> google.ads.googleads.v21.common.ThirdPartyIntegrationPartnerData
	12, // 14: google.ads.googleads.v21.common.CampaignThirdPartyBrandSafetyIntegrationPartner.brand_safety_integration_partner:type_name -> google.ads.googleads.v21.enums.ThirdPartyBrandSafetyIntegrationPartnerEnum.ThirdPartyBrandSafetyIntegrationPartner
	10, // 15: google.ads.googleads.v21.common.CampaignThirdPartyBrandSafetyIntegrationPartner.brand_safety_integration_partner_data:type_name -> google.ads.googleads.v21.common.ThirdPartyIntegrationPartnerData
	13, // 16: google.ads.googleads.v21.common.CampaignThirdPartyBrandLiftIntegrationPartner.brand_lift_integration_partner:type_name -> google.ads.googleads.v21.enums.ThirdPartyBrandLiftIntegrationPartnerEnum.ThirdPartyBrandLiftIntegrationPartner
	10, // 17: google.ads.googleads.v21.common.CampaignThirdPartyBrandLiftIntegrationPartner.brand_lift_integration_partner_data:type_name -> google.ads.googleads.v21.common.ThirdPartyIntegrationPartnerData
	14, // 18: google.ads.googleads.v21.common.CampaignThirdPartyReachIntegrationPartner.reach_integration_partner:type_name -> google.ads.googleads.v21.enums.ThirdPartyReachIntegrationPartnerEnum.ThirdPartyReachIntegrationPartner
	10, // 19: google.ads.googleads.v21.common.CampaignThirdPartyReachIntegrationPartner.reach_integration_partner_data:type_name -> google.ads.googleads.v21.common.ThirdPartyIntegrationPartnerData
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v21_common_third_party_integration_partners_proto_init() }
func file_google_ads_googleads_v21_common_third_party_integration_partners_proto_init() {
	if File_google_ads_googleads_v21_common_third_party_integration_partners_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDesc), len(file_google_ads_googleads_v21_common_third_party_integration_partners_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v21_common_third_party_integration_partners_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v21_common_third_party_integration_partners_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v21_common_third_party_integration_partners_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v21_common_third_party_integration_partners_proto = out.File
	file_google_ads_googleads_v21_common_third_party_integration_partners_proto_goTypes = nil
	file_google_ads_googleads_v21_common_third_party_integration_partners_proto_depIdxs = nil
}
